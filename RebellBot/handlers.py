from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services import TradingEngine
from config import Config
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()
trading_engine = TradingEngine()


class UserState(StatesGroup):
    AWAIT_TICKER = State()
    AWAIT_MODE = State()


def main_keyboard() -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ê–Ω–∞–ª–∏–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")],
            [KeyboardButton(text="üìà –¢–æ–ø–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")],
            [KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )


def mode_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π (1 —á–∞—Å)")],
            [KeyboardButton(text="–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π (1 –¥–µ–Ω—å)")]
        ],
        resize_keyboard=True
    )


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=main_keyboard()
    )


@router.message(F.text == "üìä –ê–Ω–∞–ª–∏–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
async def analyze_instrument(message: Message, state: FSMContext):
    await state.set_state(UserState.AWAIT_TICKER)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: SBER):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )


@router.message(F.text == "üìà –¢–æ–ø–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
async def top_instruments(message: Message):
    try:
        instruments = await trading_engine.get_top_instruments()
        response = "üìà –¢–æ–ø-5 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:\n" + "\n".join(
            f"{idx + 1}. {item['ticker']} ({item['name']})"
            for idx, item in enumerate(instruments)
        )
        await message.answer(response, reply_markup=main_keyboard())
    except Exception as e:
        logger.error(str(e))
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", reply_markup=main_keyboard())


@router.message(F.text == "üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º")
async def change_mode(message: Message, state: FSMContext):
    await state.set_state(UserState.AWAIT_MODE)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=mode_keyboard()
    )


@router.message(UserState.AWAIT_MODE, F.text.in_(["–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π (1 —á–∞—Å)", "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π (1 –¥–µ–Ω—å)"]))
async def process_mode(message: Message, state: FSMContext):
    mode = "short_term" if "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π" in message.text else "long_term"
    await state.update_data(mode=mode)
    await message.answer(
        f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {message.text}",
        reply_markup=main_keyboard()
    )
    await state.clear()


@router.message(UserState.AWAIT_TICKER)
async def process_ticker(message: Message, state: FSMContext):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
        return

    user_data = await state.get_data()
    mode = user_data.get("mode", "short_term")

    try:
        analysis = await trading_engine.analyze(
            ticker=message.text.upper(),
            mode=mode
        )

        response = (
            f"üìä –ê–Ω–∞–ª–∏–∑ {message.text.upper()} ({'–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π' if mode == 'short_term' else '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π'}):\n"
            f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {analysis['decision']}\n"
            f"‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis['confidence']}%\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {analysis['price']:.2f} RUB\n"
            f"‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: {analysis['stop_loss']:.2f}\n"
            f"‚Ä¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {analysis['take_profit']:.2f}"
        )

        await message.answer(response, reply_markup=main_keyboard())
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        await message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö", reply_markup=main_keyboard())
        await state.clear()


@router.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def back_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())